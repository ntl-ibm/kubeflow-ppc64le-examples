name: Load dataset
outputs:
- {name: dataset_dir, type: String}
implementation:
  container:
    image: quay.io/ibm/kubeflow-notebook-image-ppc64le:elyra3.14.1-py3.9-tf2.10.1-pt1.10.2-v0
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def load_dataset(dataset_dir):
          from datasets import load_dataset
          import os

          squad = load_dataset("squad")
          if not os.path.exists(dataset_dir):
              os.makedirs(dataset_dir)
          squad.save_to_disk(dataset_dir)

      import argparse
      _parser = argparse.ArgumentParser(prog='Load dataset', description='')
      _parser.add_argument("--dataset-dir", dest="dataset_dir", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = load_dataset(**_parsed_args)
    args:
    - --dataset-dir
    - {outputPath: dataset_dir}
